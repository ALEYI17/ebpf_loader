// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package mmaptracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type MmaptracerMmapEventT struct {
	Pid             uint32
	Uid             uint32
	Gid             uint32
	_               [4]byte
	CgroupId        uint64
	Ppid            uint32
	CgroupName      [150]uint8
	_               [2]byte
	UserPid         uint32
	UserPpid        uint32
	Comm            [150]uint8
	_               [6]byte
	TimestampNs     uint64
	Ret             int64
	Latency         uint64
	TimestampNsExit uint64
	Addr            uint64
	Len             uint64
	Prot            uint64
	Flags           uint64
	Fd              uint64
	Off             uint64
}

// LoadMmaptracer returns the embedded CollectionSpec for Mmaptracer.
func LoadMmaptracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MmaptracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Mmaptracer: %w", err)
	}

	return spec, err
}

// LoadMmaptracerObjects loads Mmaptracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*MmaptracerObjects
//	*MmaptracerPrograms
//	*MmaptracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadMmaptracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadMmaptracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// MmaptracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MmaptracerSpecs struct {
	MmaptracerProgramSpecs
	MmaptracerMapSpecs
	MmaptracerVariableSpecs
}

// MmaptracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MmaptracerProgramSpecs struct {
	HandleEnterMmap *ebpf.ProgramSpec `ebpf:"handle_enter_mmap"`
	HandleExitMmap  *ebpf.ProgramSpec `ebpf:"handle_exit_mmap"`
}

// MmaptracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MmaptracerMapSpecs struct {
	EventsMmap      *ebpf.MapSpec `ebpf:"events_mmap"`
	StartEventsMmap *ebpf.MapSpec `ebpf:"start_events_mmap"`
	TmpEventMap     *ebpf.MapSpec `ebpf:"tmp_event_map"`
}

// MmaptracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MmaptracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// MmaptracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadMmaptracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type MmaptracerObjects struct {
	MmaptracerPrograms
	MmaptracerMaps
	MmaptracerVariables
}

func (o *MmaptracerObjects) Close() error {
	return _MmaptracerClose(
		&o.MmaptracerPrograms,
		&o.MmaptracerMaps,
	)
}

// MmaptracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadMmaptracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type MmaptracerMaps struct {
	EventsMmap      *ebpf.Map `ebpf:"events_mmap"`
	StartEventsMmap *ebpf.Map `ebpf:"start_events_mmap"`
	TmpEventMap     *ebpf.Map `ebpf:"tmp_event_map"`
}

func (m *MmaptracerMaps) Close() error {
	return _MmaptracerClose(
		m.EventsMmap,
		m.StartEventsMmap,
		m.TmpEventMap,
	)
}

// MmaptracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadMmaptracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type MmaptracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// MmaptracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadMmaptracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type MmaptracerPrograms struct {
	HandleEnterMmap *ebpf.Program `ebpf:"handle_enter_mmap"`
	HandleExitMmap  *ebpf.Program `ebpf:"handle_exit_mmap"`
}

func (p *MmaptracerPrograms) Close() error {
	return _MmaptracerClose(
		p.HandleEnterMmap,
		p.HandleExitMmap,
	)
}

func _MmaptracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed mmaptracer_x86_bpfel.o
var _MmaptracerBytes []byte
