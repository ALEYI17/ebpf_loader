// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package mounttracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type MounttracerMountEventT struct {
	Pid             uint32
	Uid             uint32
	Gid             uint32
	_               [4]byte
	CgroupId        uint64
	Ppid            uint32
	CgroupName      [150]uint8
	_               [2]byte
	UserPid         uint32
	UserPpid        uint32
	Comm            [150]uint8
	_               [6]byte
	TimestampNs     uint64
	Ret             int64
	Latency         uint64
	TimestampNsExit uint64
	DevName         [128]uint8
	DirName         [128]uint8
	Type            [128]uint8
	Flags           uint64
}

// LoadMounttracer returns the embedded CollectionSpec for Mounttracer.
func LoadMounttracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MounttracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Mounttracer: %w", err)
	}

	return spec, err
}

// LoadMounttracerObjects loads Mounttracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*MounttracerObjects
//	*MounttracerPrograms
//	*MounttracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadMounttracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadMounttracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// MounttracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MounttracerSpecs struct {
	MounttracerProgramSpecs
	MounttracerMapSpecs
	MounttracerVariableSpecs
}

// MounttracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MounttracerProgramSpecs struct {
	HandleEnterMount *ebpf.ProgramSpec `ebpf:"handle_enter_mount"`
	HandleExitMount  *ebpf.ProgramSpec `ebpf:"handle_exit_mount"`
}

// MounttracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MounttracerMapSpecs struct {
	EventsMount      *ebpf.MapSpec `ebpf:"events_mount"`
	StartEventsMount *ebpf.MapSpec `ebpf:"start_events_mount"`
	TmpEventMap      *ebpf.MapSpec `ebpf:"tmp_event_map"`
}

// MounttracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type MounttracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// MounttracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadMounttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type MounttracerObjects struct {
	MounttracerPrograms
	MounttracerMaps
	MounttracerVariables
}

func (o *MounttracerObjects) Close() error {
	return _MounttracerClose(
		&o.MounttracerPrograms,
		&o.MounttracerMaps,
	)
}

// MounttracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadMounttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type MounttracerMaps struct {
	EventsMount      *ebpf.Map `ebpf:"events_mount"`
	StartEventsMount *ebpf.Map `ebpf:"start_events_mount"`
	TmpEventMap      *ebpf.Map `ebpf:"tmp_event_map"`
}

func (m *MounttracerMaps) Close() error {
	return _MounttracerClose(
		m.EventsMount,
		m.StartEventsMount,
		m.TmpEventMap,
	)
}

// MounttracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadMounttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type MounttracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// MounttracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadMounttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type MounttracerPrograms struct {
	HandleEnterMount *ebpf.Program `ebpf:"handle_enter_mount"`
	HandleExitMount  *ebpf.Program `ebpf:"handle_exit_mount"`
}

func (p *MounttracerPrograms) Close() error {
	return _MounttracerClose(
		p.HandleEnterMount,
		p.HandleExitMount,
	)
}

func _MounttracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed mounttracer_x86_bpfel.o
var _MounttracerBytes []byte
