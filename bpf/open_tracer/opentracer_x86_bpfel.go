// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package opentracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type OpentracerOpenEvent struct {
	Pid             uint32
	Uid             uint32
	Comm            [150]uint8
	Filename        [256]uint8
	_               [2]byte
	Flags           int32
	_               [4]byte
	TimestampNs     uint64
	Ret             int64
	Latency         uint64
	TimestampNsExit uint64
}

// LoadOpentracer returns the embedded CollectionSpec for Opentracer.
func LoadOpentracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpentracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Opentracer: %w", err)
	}

	return spec, err
}

// LoadOpentracerObjects loads Opentracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*OpentracerObjects
//	*OpentracerPrograms
//	*OpentracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadOpentracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadOpentracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// OpentracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OpentracerSpecs struct {
	OpentracerProgramSpecs
	OpentracerMapSpecs
	OpentracerVariableSpecs
}

// OpentracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OpentracerProgramSpecs struct {
	HandleEnterOpenat *ebpf.ProgramSpec `ebpf:"handle_enter_openat"`
	HandleExitOpenat  *ebpf.ProgramSpec `ebpf:"handle_exit_openat"`
}

// OpentracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OpentracerMapSpecs struct {
	Events      *ebpf.MapSpec `ebpf:"events"`
	StartEvents *ebpf.MapSpec `ebpf:"start_events"`
}

// OpentracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type OpentracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// OpentracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadOpentracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type OpentracerObjects struct {
	OpentracerPrograms
	OpentracerMaps
	OpentracerVariables
}

func (o *OpentracerObjects) Close() error {
	return _OpentracerClose(
		&o.OpentracerPrograms,
		&o.OpentracerMaps,
	)
}

// OpentracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadOpentracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type OpentracerMaps struct {
	Events      *ebpf.Map `ebpf:"events"`
	StartEvents *ebpf.Map `ebpf:"start_events"`
}

func (m *OpentracerMaps) Close() error {
	return _OpentracerClose(
		m.Events,
		m.StartEvents,
	)
}

// OpentracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadOpentracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type OpentracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// OpentracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadOpentracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type OpentracerPrograms struct {
	HandleEnterOpenat *ebpf.Program `ebpf:"handle_enter_openat"`
	HandleExitOpenat  *ebpf.Program `ebpf:"handle_exit_openat"`
}

func (p *OpentracerPrograms) Close() error {
	return _OpentracerClose(
		p.HandleEnterOpenat,
		p.HandleExitOpenat,
	)
}

func _OpentracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed opentracer_x86_bpfel.o
var _OpentracerBytes []byte
