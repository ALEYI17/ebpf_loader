// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package syscallfreq

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type SysFreqtracerProcessMetadataT struct {
	Pid        uint32
	Uid        uint32
	Gid        uint32
	_          [4]byte
	CgroupId   uint64
	Ppid       uint32
	CgroupName [150]uint8
	_          [2]byte
	UserPid    uint32
	UserPpid   uint32
	Comm       [150]uint8
	_          [6]byte
}

type SysFreqtracerSyscallKey struct {
	Pid       uint32
	SyscallNr uint32
}

// LoadSysFreqtracer returns the embedded CollectionSpec for SysFreqtracer.
func LoadSysFreqtracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SysFreqtracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load SysFreqtracer: %w", err)
	}

	return spec, err
}

// LoadSysFreqtracerObjects loads SysFreqtracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*SysFreqtracerObjects
//	*SysFreqtracerPrograms
//	*SysFreqtracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadSysFreqtracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadSysFreqtracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// SysFreqtracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SysFreqtracerSpecs struct {
	SysFreqtracerProgramSpecs
	SysFreqtracerMapSpecs
	SysFreqtracerVariableSpecs
}

// SysFreqtracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SysFreqtracerProgramSpecs struct {
	HandleSchedProcessExit *ebpf.ProgramSpec `ebpf:"handle_sched_process_exit"`
	TraceSysEnter          *ebpf.ProgramSpec `ebpf:"trace_sys_enter"`
}

// SysFreqtracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SysFreqtracerMapSpecs struct {
	MetaCache   *ebpf.MapSpec `ebpf:"meta_cache"`
	SyscountMap *ebpf.MapSpec `ebpf:"syscount_map"`
}

// SysFreqtracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type SysFreqtracerVariableSpecs struct {
	Unused  *ebpf.VariableSpec `ebpf:"unused"`
	Unused2 *ebpf.VariableSpec `ebpf:"unused2"`
}

// SysFreqtracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadSysFreqtracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type SysFreqtracerObjects struct {
	SysFreqtracerPrograms
	SysFreqtracerMaps
	SysFreqtracerVariables
}

func (o *SysFreqtracerObjects) Close() error {
	return _SysFreqtracerClose(
		&o.SysFreqtracerPrograms,
		&o.SysFreqtracerMaps,
	)
}

// SysFreqtracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadSysFreqtracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type SysFreqtracerMaps struct {
	MetaCache   *ebpf.Map `ebpf:"meta_cache"`
	SyscountMap *ebpf.Map `ebpf:"syscount_map"`
}

func (m *SysFreqtracerMaps) Close() error {
	return _SysFreqtracerClose(
		m.MetaCache,
		m.SyscountMap,
	)
}

// SysFreqtracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadSysFreqtracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type SysFreqtracerVariables struct {
	Unused  *ebpf.Variable `ebpf:"unused"`
	Unused2 *ebpf.Variable `ebpf:"unused2"`
}

// SysFreqtracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadSysFreqtracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type SysFreqtracerPrograms struct {
	HandleSchedProcessExit *ebpf.Program `ebpf:"handle_sched_process_exit"`
	TraceSysEnter          *ebpf.Program `ebpf:"trace_sys_enter"`
}

func (p *SysFreqtracerPrograms) Close() error {
	return _SysFreqtracerClose(
		p.HandleSchedProcessExit,
		p.TraceSysEnter,
	)
}

func _SysFreqtracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sysfreqtracer_x86_bpfel.o
var _SysFreqtracerBytes []byte
