// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package chmodtracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ChmodtracerTraceSyscallEvent struct {
	Pid             uint32
	Uid             uint32
	Gid             uint32
	_               [4]byte
	CgroupId        uint64
	Ppid            uint32
	CgroupName      [150]uint8
	_               [2]byte
	UserPid         uint32
	UserPpid        uint32
	Comm            [150]uint8
	Filename        [256]uint8
	_               [6]byte
	TimestampNs     uint64
	Ret             int64
	Latency         uint64
	TimestampNsExit uint64
}

// LoadChmodtracer returns the embedded CollectionSpec for Chmodtracer.
func LoadChmodtracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ChmodtracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Chmodtracer: %w", err)
	}

	return spec, err
}

// LoadChmodtracerObjects loads Chmodtracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ChmodtracerObjects
//	*ChmodtracerPrograms
//	*ChmodtracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadChmodtracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadChmodtracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ChmodtracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ChmodtracerSpecs struct {
	ChmodtracerProgramSpecs
	ChmodtracerMapSpecs
	ChmodtracerVariableSpecs
}

// ChmodtracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ChmodtracerProgramSpecs struct {
	HandleEnterChmod *ebpf.ProgramSpec `ebpf:"handle_enter_chmod"`
	HandleExitChmod  *ebpf.ProgramSpec `ebpf:"handle_exit_chmod"`
}

// ChmodtracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ChmodtracerMapSpecs struct {
	ChmodEvents      *ebpf.MapSpec `ebpf:"chmod_events"`
	ChmodStartEvents *ebpf.MapSpec `ebpf:"chmod_start_events"`
	TmpEventMap      *ebpf.MapSpec `ebpf:"tmp_event_map"`
}

// ChmodtracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ChmodtracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// ChmodtracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadChmodtracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ChmodtracerObjects struct {
	ChmodtracerPrograms
	ChmodtracerMaps
	ChmodtracerVariables
}

func (o *ChmodtracerObjects) Close() error {
	return _ChmodtracerClose(
		&o.ChmodtracerPrograms,
		&o.ChmodtracerMaps,
	)
}

// ChmodtracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadChmodtracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ChmodtracerMaps struct {
	ChmodEvents      *ebpf.Map `ebpf:"chmod_events"`
	ChmodStartEvents *ebpf.Map `ebpf:"chmod_start_events"`
	TmpEventMap      *ebpf.Map `ebpf:"tmp_event_map"`
}

func (m *ChmodtracerMaps) Close() error {
	return _ChmodtracerClose(
		m.ChmodEvents,
		m.ChmodStartEvents,
		m.TmpEventMap,
	)
}

// ChmodtracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadChmodtracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ChmodtracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// ChmodtracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadChmodtracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ChmodtracerPrograms struct {
	HandleEnterChmod *ebpf.Program `ebpf:"handle_enter_chmod"`
	HandleExitChmod  *ebpf.Program `ebpf:"handle_exit_chmod"`
}

func (p *ChmodtracerPrograms) Close() error {
	return _ChmodtracerClose(
		p.HandleEnterChmod,
		p.HandleExitChmod,
	)
}

func _ChmodtracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed chmodtracer_x86_bpfel.o
var _ChmodtracerBytes []byte
