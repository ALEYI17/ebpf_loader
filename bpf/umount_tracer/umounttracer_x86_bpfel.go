// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package umounttracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type UmounttracerMountEventT struct {
	Pid             uint32
	Uid             uint32
	Gid             uint32
	_               [4]byte
	CgroupId        uint64
	Ppid            uint32
	CgroupName      [150]uint8
	_               [2]byte
	UserPid         uint32
	UserPpid        uint32
	Comm            [150]uint8
	_               [6]byte
	TimestampNs     uint64
	Ret             int64
	Latency         uint64
	TimestampNsExit uint64
	DevName         [128]uint8
	DirName         [128]uint8
	Type            [128]uint8
	Flags           uint64
}

// LoadUmounttracer returns the embedded CollectionSpec for Umounttracer.
func LoadUmounttracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UmounttracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Umounttracer: %w", err)
	}

	return spec, err
}

// LoadUmounttracerObjects loads Umounttracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*UmounttracerObjects
//	*UmounttracerPrograms
//	*UmounttracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadUmounttracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadUmounttracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// UmounttracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UmounttracerSpecs struct {
	UmounttracerProgramSpecs
	UmounttracerMapSpecs
	UmounttracerVariableSpecs
}

// UmounttracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UmounttracerProgramSpecs struct {
	HandleEnterUmount *ebpf.ProgramSpec `ebpf:"handle_enter_umount"`
	HandleExitUmount  *ebpf.ProgramSpec `ebpf:"handle_exit_umount"`
}

// UmounttracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UmounttracerMapSpecs struct {
	EventsUmount      *ebpf.MapSpec `ebpf:"events_umount"`
	StartEventsUmount *ebpf.MapSpec `ebpf:"start_events_umount"`
	TmpEventMap       *ebpf.MapSpec `ebpf:"tmp_event_map"`
}

// UmounttracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UmounttracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// UmounttracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadUmounttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type UmounttracerObjects struct {
	UmounttracerPrograms
	UmounttracerMaps
	UmounttracerVariables
}

func (o *UmounttracerObjects) Close() error {
	return _UmounttracerClose(
		&o.UmounttracerPrograms,
		&o.UmounttracerMaps,
	)
}

// UmounttracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadUmounttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type UmounttracerMaps struct {
	EventsUmount      *ebpf.Map `ebpf:"events_umount"`
	StartEventsUmount *ebpf.Map `ebpf:"start_events_umount"`
	TmpEventMap       *ebpf.Map `ebpf:"tmp_event_map"`
}

func (m *UmounttracerMaps) Close() error {
	return _UmounttracerClose(
		m.EventsUmount,
		m.StartEventsUmount,
		m.TmpEventMap,
	)
}

// UmounttracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadUmounttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type UmounttracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// UmounttracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadUmounttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type UmounttracerPrograms struct {
	HandleEnterUmount *ebpf.Program `ebpf:"handle_enter_umount"`
	HandleExitUmount  *ebpf.Program `ebpf:"handle_exit_umount"`
}

func (p *UmounttracerPrograms) Close() error {
	return _UmounttracerClose(
		p.HandleEnterUmount,
		p.HandleExitUmount,
	)
}

func _UmounttracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed umounttracer_x86_bpfel.o
var _UmounttracerBytes []byte
