// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package ptracetracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type PtracetracerPtraceEventT struct {
	Pid             uint32
	Uid             uint32
	Gid             uint32
	_               [4]byte
	CgroupId        uint64
	Ppid            uint32
	CgroupName      [150]uint8
	_               [2]byte
	UserPid         uint32
	UserPpid        uint32
	Comm            [150]uint8
	_               [6]byte
	TimestampNs     uint64
	Ret             int64
	Latency         uint64
	TimestampNsExit uint64
	Request         int64
	PidPtrace       int64
	Addr            uint64
	Data            uint64
}

// LoadPtracetracer returns the embedded CollectionSpec for Ptracetracer.
func LoadPtracetracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PtracetracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Ptracetracer: %w", err)
	}

	return spec, err
}

// LoadPtracetracerObjects loads Ptracetracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*PtracetracerObjects
//	*PtracetracerPrograms
//	*PtracetracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadPtracetracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadPtracetracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// PtracetracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PtracetracerSpecs struct {
	PtracetracerProgramSpecs
	PtracetracerMapSpecs
	PtracetracerVariableSpecs
}

// PtracetracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PtracetracerProgramSpecs struct {
	HandleEnterPtrace *ebpf.ProgramSpec `ebpf:"handle_enter_ptrace"`
	HandleExitPtrace  *ebpf.ProgramSpec `ebpf:"handle_exit_ptrace"`
}

// PtracetracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PtracetracerMapSpecs struct {
	EventsPtrace      *ebpf.MapSpec `ebpf:"events_ptrace"`
	StartEventsPtrace *ebpf.MapSpec `ebpf:"start_events_ptrace"`
	TmpEventMap       *ebpf.MapSpec `ebpf:"tmp_event_map"`
}

// PtracetracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PtracetracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// PtracetracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadPtracetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type PtracetracerObjects struct {
	PtracetracerPrograms
	PtracetracerMaps
	PtracetracerVariables
}

func (o *PtracetracerObjects) Close() error {
	return _PtracetracerClose(
		&o.PtracetracerPrograms,
		&o.PtracetracerMaps,
	)
}

// PtracetracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadPtracetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type PtracetracerMaps struct {
	EventsPtrace      *ebpf.Map `ebpf:"events_ptrace"`
	StartEventsPtrace *ebpf.Map `ebpf:"start_events_ptrace"`
	TmpEventMap       *ebpf.Map `ebpf:"tmp_event_map"`
}

func (m *PtracetracerMaps) Close() error {
	return _PtracetracerClose(
		m.EventsPtrace,
		m.StartEventsPtrace,
		m.TmpEventMap,
	)
}

// PtracetracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadPtracetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type PtracetracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// PtracetracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadPtracetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type PtracetracerPrograms struct {
	HandleEnterPtrace *ebpf.Program `ebpf:"handle_enter_ptrace"`
	HandleExitPtrace  *ebpf.Program `ebpf:"handle_exit_ptrace"`
}

func (p *PtracetracerPrograms) Close() error {
	return _PtracetracerClose(
		p.HandleEnterPtrace,
		p.HandleExitPtrace,
	)
}

func _PtracetracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ptracetracer_x86_bpfel.o
var _PtracetracerBytes []byte
