// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package connecttracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ConnecttracerSocketEventT struct {
	Pid              uint32
	Uid              uint32
	Gid              uint32
	_                [4]byte
	CgroupId         uint64
	Ppid             uint32
	Comm             [150]uint8
	CgroupName       [150]uint8
	UserPid          uint32
	UserPpid         uint32
	TimestampNsEnter uint64
	TimestampNsExit  uint64
	LatencyNs        uint64
	Ret              int64
	SaFamily         uint16
	_                [2]byte
	Saddr            uint32
	Daddr            uint32
	Sport            uint16
	Dport            uint16
}

// LoadConnecttracer returns the embedded CollectionSpec for Connecttracer.
func LoadConnecttracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ConnecttracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Connecttracer: %w", err)
	}

	return spec, err
}

// LoadConnecttracerObjects loads Connecttracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ConnecttracerObjects
//	*ConnecttracerPrograms
//	*ConnecttracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadConnecttracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadConnecttracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ConnecttracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ConnecttracerSpecs struct {
	ConnecttracerProgramSpecs
	ConnecttracerMapSpecs
	ConnecttracerVariableSpecs
}

// ConnecttracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ConnecttracerProgramSpecs struct {
	HandleTcpV4Connect    *ebpf.ProgramSpec `ebpf:"handle_tcp_v4_connect"`
	HandleTcpV4ConnectRet *ebpf.ProgramSpec `ebpf:"handle_tcp_v4_connect_ret"`
}

// ConnecttracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ConnecttracerMapSpecs struct {
	ConnectEvents      *ebpf.MapSpec `ebpf:"connect_events"`
	ConnectEventsTs    *ebpf.MapSpec `ebpf:"connect_events_ts"`
	ConnectStartEvents *ebpf.MapSpec `ebpf:"connect_start_events"`
}

// ConnecttracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ConnecttracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// ConnecttracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadConnecttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ConnecttracerObjects struct {
	ConnecttracerPrograms
	ConnecttracerMaps
	ConnecttracerVariables
}

func (o *ConnecttracerObjects) Close() error {
	return _ConnecttracerClose(
		&o.ConnecttracerPrograms,
		&o.ConnecttracerMaps,
	)
}

// ConnecttracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadConnecttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ConnecttracerMaps struct {
	ConnectEvents      *ebpf.Map `ebpf:"connect_events"`
	ConnectEventsTs    *ebpf.Map `ebpf:"connect_events_ts"`
	ConnectStartEvents *ebpf.Map `ebpf:"connect_start_events"`
}

func (m *ConnecttracerMaps) Close() error {
	return _ConnecttracerClose(
		m.ConnectEvents,
		m.ConnectEventsTs,
		m.ConnectStartEvents,
	)
}

// ConnecttracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadConnecttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ConnecttracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// ConnecttracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadConnecttracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ConnecttracerPrograms struct {
	HandleTcpV4Connect    *ebpf.Program `ebpf:"handle_tcp_v4_connect"`
	HandleTcpV4ConnectRet *ebpf.Program `ebpf:"handle_tcp_v4_connect_ret"`
}

func (p *ConnecttracerPrograms) Close() error {
	return _ConnecttracerClose(
		p.HandleTcpV4Connect,
		p.HandleTcpV4ConnectRet,
	)
}

func _ConnecttracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed connecttracer_x86_bpfel.o
var _ConnecttracerBytes []byte
