// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package resourcetracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ResourcetracerResourceEventT struct {
	Pid              uint32
	Uid              uint32
	Gid              uint32
	_                [4]byte
	CgroupId         uint64
	Ppid             uint32
	CgroupName       [150]uint8
	_                [2]byte
	UserPid          uint32
	UserPpid         uint32
	Comm             [150]uint8
	_                [6]byte
	TimestampNs      uint64
	Latency          uint64
	TimestampNsExit  uint64
	CpuNs            uint64
	UserFaults       uint64
	KernelFaults     uint64
	VmMmapBytes      uint64
	VmMunmapBytes    uint64
	VmBrkGrowBytes   uint64
	VmBrkShrinkBytes uint64
	BytesWritten     uint64
	BytesRead        uint64
	LastSeenNs       uint64
}

// LoadResourcetracer returns the embedded CollectionSpec for Resourcetracer.
func LoadResourcetracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ResourcetracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Resourcetracer: %w", err)
	}

	return spec, err
}

// LoadResourcetracerObjects loads Resourcetracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ResourcetracerObjects
//	*ResourcetracerPrograms
//	*ResourcetracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadResourcetracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadResourcetracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ResourcetracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ResourcetracerSpecs struct {
	ResourcetracerProgramSpecs
	ResourcetracerMapSpecs
	ResourcetracerVariableSpecs
}

// ResourcetracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ResourcetracerProgramSpecs struct {
	HandleFinishTaskSwitch *ebpf.ProgramSpec `ebpf:"handle_finish_task_switch"`
	HandlePageFaultKernel  *ebpf.ProgramSpec `ebpf:"handle_page_fault_kernel"`
	HandlePageFaultUser    *ebpf.ProgramSpec `ebpf:"handle_page_fault_user"`
	TpEnterMmap            *ebpf.ProgramSpec `ebpf:"tp_enter_mmap"`
	TpEnterMunmap          *ebpf.ProgramSpec `ebpf:"tp_enter_munmap"`
	TpExitBrk              *ebpf.ProgramSpec `ebpf:"tp_exit_brk"`
	TpExitMmap             *ebpf.ProgramSpec `ebpf:"tp_exit_mmap"`
	TpExitMunmap           *ebpf.ProgramSpec `ebpf:"tp_exit_munmap"`
	TraceExitRead          *ebpf.ProgramSpec `ebpf:"trace_exit_read"`
	TraceExitWrite         *ebpf.ProgramSpec `ebpf:"trace_exit_write"`
}

// ResourcetracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ResourcetracerMapSpecs struct {
	LastBrkEnd       *ebpf.MapSpec `ebpf:"last_brk_end"`
	PendingMmapLen   *ebpf.MapSpec `ebpf:"pending_mmap_len"`
	PendingMunmapLen *ebpf.MapSpec `ebpf:"pending_munmap_len"`
	ResourceTable    *ebpf.MapSpec `ebpf:"resource_table"`
	RunStartNs       *ebpf.MapSpec `ebpf:"run_start_ns"`
}

// ResourcetracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ResourcetracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// ResourcetracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadResourcetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ResourcetracerObjects struct {
	ResourcetracerPrograms
	ResourcetracerMaps
	ResourcetracerVariables
}

func (o *ResourcetracerObjects) Close() error {
	return _ResourcetracerClose(
		&o.ResourcetracerPrograms,
		&o.ResourcetracerMaps,
	)
}

// ResourcetracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadResourcetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ResourcetracerMaps struct {
	LastBrkEnd       *ebpf.Map `ebpf:"last_brk_end"`
	PendingMmapLen   *ebpf.Map `ebpf:"pending_mmap_len"`
	PendingMunmapLen *ebpf.Map `ebpf:"pending_munmap_len"`
	ResourceTable    *ebpf.Map `ebpf:"resource_table"`
	RunStartNs       *ebpf.Map `ebpf:"run_start_ns"`
}

func (m *ResourcetracerMaps) Close() error {
	return _ResourcetracerClose(
		m.LastBrkEnd,
		m.PendingMmapLen,
		m.PendingMunmapLen,
		m.ResourceTable,
		m.RunStartNs,
	)
}

// ResourcetracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadResourcetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ResourcetracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// ResourcetracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadResourcetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ResourcetracerPrograms struct {
	HandleFinishTaskSwitch *ebpf.Program `ebpf:"handle_finish_task_switch"`
	HandlePageFaultKernel  *ebpf.Program `ebpf:"handle_page_fault_kernel"`
	HandlePageFaultUser    *ebpf.Program `ebpf:"handle_page_fault_user"`
	TpEnterMmap            *ebpf.Program `ebpf:"tp_enter_mmap"`
	TpEnterMunmap          *ebpf.Program `ebpf:"tp_enter_munmap"`
	TpExitBrk              *ebpf.Program `ebpf:"tp_exit_brk"`
	TpExitMmap             *ebpf.Program `ebpf:"tp_exit_mmap"`
	TpExitMunmap           *ebpf.Program `ebpf:"tp_exit_munmap"`
	TraceExitRead          *ebpf.Program `ebpf:"trace_exit_read"`
	TraceExitWrite         *ebpf.Program `ebpf:"trace_exit_write"`
}

func (p *ResourcetracerPrograms) Close() error {
	return _ResourcetracerClose(
		p.HandleFinishTaskSwitch,
		p.HandlePageFaultKernel,
		p.HandlePageFaultUser,
		p.TpEnterMmap,
		p.TpEnterMunmap,
		p.TpExitBrk,
		p.TpExitMmap,
		p.TpExitMunmap,
		p.TraceExitRead,
		p.TraceExitWrite,
	)
}

func _ResourcetracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed resourcetracer_x86_bpfel.o
var _ResourcetracerBytes []byte
