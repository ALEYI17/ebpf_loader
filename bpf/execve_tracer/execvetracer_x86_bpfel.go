// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package execvetracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ExecvetracerTraceSyscallEvent struct {
	Pid             uint32
	Uid             uint32
	Gid             uint32
	_               [4]byte
	CgroupId        uint64
	Ppid            uint32
	CgroupName      [150]uint8
	_               [2]byte
	UserPid         uint32
	UserPpid        uint32
	Comm            [150]uint8
	Filename        [256]uint8
	_               [6]byte
	TimestampNs     uint64
	Ret             int64
	Latency         uint64
	TimestampNsExit uint64
}

// LoadExecvetracer returns the embedded CollectionSpec for Execvetracer.
func LoadExecvetracer() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExecvetracerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Execvetracer: %w", err)
	}

	return spec, err
}

// LoadExecvetracerObjects loads Execvetracer and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ExecvetracerObjects
//	*ExecvetracerPrograms
//	*ExecvetracerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadExecvetracerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadExecvetracer()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ExecvetracerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExecvetracerSpecs struct {
	ExecvetracerProgramSpecs
	ExecvetracerMapSpecs
	ExecvetracerVariableSpecs
}

// ExecvetracerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExecvetracerProgramSpecs struct {
	HandleEnterExecve *ebpf.ProgramSpec `ebpf:"handle_enter_execve"`
	HandleExitExecve  *ebpf.ProgramSpec `ebpf:"handle_exit_execve"`
}

// ExecvetracerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExecvetracerMapSpecs struct {
	ExecEvents      *ebpf.MapSpec `ebpf:"exec_events"`
	ExecStartEvents *ebpf.MapSpec `ebpf:"exec_start_events"`
	TmpEventMap     *ebpf.MapSpec `ebpf:"tmp_event_map"`
}

// ExecvetracerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExecvetracerVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// ExecvetracerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadExecvetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExecvetracerObjects struct {
	ExecvetracerPrograms
	ExecvetracerMaps
	ExecvetracerVariables
}

func (o *ExecvetracerObjects) Close() error {
	return _ExecvetracerClose(
		&o.ExecvetracerPrograms,
		&o.ExecvetracerMaps,
	)
}

// ExecvetracerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadExecvetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExecvetracerMaps struct {
	ExecEvents      *ebpf.Map `ebpf:"exec_events"`
	ExecStartEvents *ebpf.Map `ebpf:"exec_start_events"`
	TmpEventMap     *ebpf.Map `ebpf:"tmp_event_map"`
}

func (m *ExecvetracerMaps) Close() error {
	return _ExecvetracerClose(
		m.ExecEvents,
		m.ExecStartEvents,
		m.TmpEventMap,
	)
}

// ExecvetracerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadExecvetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExecvetracerVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// ExecvetracerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadExecvetracerObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExecvetracerPrograms struct {
	HandleEnterExecve *ebpf.Program `ebpf:"handle_enter_execve"`
	HandleExitExecve  *ebpf.Program `ebpf:"handle_exit_execve"`
}

func (p *ExecvetracerPrograms) Close() error {
	return _ExecvetracerClose(
		p.HandleEnterExecve,
		p.HandleExitExecve,
	)
}

func _ExecvetracerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed execvetracer_x86_bpfel.o
var _ExecvetracerBytes []byte
