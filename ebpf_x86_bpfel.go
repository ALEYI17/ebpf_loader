// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ebpfOpenEvent struct {
	Pid             uint32
	Uid             uint32
	Comm            [150]uint8
	Filename        [256]uint8
	_               [2]byte
	Flags           int32
	_               [4]byte
	TimestampNs     uint64
	Ret             int64
	Latency         uint64
	TimestampNsExit uint64
}

// loadEbpf returns the embedded CollectionSpec for ebpf.
func loadEbpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_EbpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load ebpf: %w", err)
	}

	return spec, err
}

// loadEbpfObjects loads ebpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ebpfObjects
//	*ebpfPrograms
//	*ebpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadEbpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadEbpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ebpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfSpecs struct {
	ebpfProgramSpecs
	ebpfMapSpecs
	ebpfVariableSpecs
}

// ebpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfProgramSpecs struct {
	HandleEnterOpenat *ebpf.ProgramSpec `ebpf:"handle_enter_openat"`
	HandleExitOpenat  *ebpf.ProgramSpec `ebpf:"handle_exit_openat"`
}

// ebpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfMapSpecs struct {
	Events      *ebpf.MapSpec `ebpf:"events"`
	StartEvents *ebpf.MapSpec `ebpf:"start_events"`
}

// ebpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ebpfVariableSpecs struct {
	Unused *ebpf.VariableSpec `ebpf:"unused"`
}

// ebpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfObjects struct {
	ebpfPrograms
	ebpfMaps
	ebpfVariables
}

func (o *ebpfObjects) Close() error {
	return _EbpfClose(
		&o.ebpfPrograms,
		&o.ebpfMaps,
	)
}

// ebpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfMaps struct {
	Events      *ebpf.Map `ebpf:"events"`
	StartEvents *ebpf.Map `ebpf:"start_events"`
}

func (m *ebpfMaps) Close() error {
	return _EbpfClose(
		m.Events,
		m.StartEvents,
	)
}

// ebpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfVariables struct {
	Unused *ebpf.Variable `ebpf:"unused"`
}

// ebpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadEbpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type ebpfPrograms struct {
	HandleEnterOpenat *ebpf.Program `ebpf:"handle_enter_openat"`
	HandleExitOpenat  *ebpf.Program `ebpf:"handle_exit_openat"`
}

func (p *ebpfPrograms) Close() error {
	return _EbpfClose(
		p.HandleEnterOpenat,
		p.HandleExitOpenat,
	)
}

func _EbpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ebpf_x86_bpfel.o
var _EbpfBytes []byte
